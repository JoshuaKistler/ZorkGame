package ch.bbw.zork;import java.util.ArrayList;import java.util.HashSet;import java.util.Stack;public class Game {		private Parser parser;	private Room currentRoom;	private Room outside, pool, poolhouse, entrance, stairs, living, basement, dungeon, kitchen, locked, bedroom;	public Game() {				parser = new Parser(System.in);				// Create all the rooms and link their exits together.		outside = new Room("the outside of Diddy's Mansion");		pool = new Room("Diddy's pool with big beds");		poolhouse = new Room("a smaller House next to Diddy's big House");		entrance = new Room("the entrance to Diddy's gigantic house");		stairs = new Room("the only way to upstairs in Diddy's Mansion");		living = new Room("gigantic room with lots of beds and a hidden tunel");		basement = new Room("a dark and scary way to the fun dungeon");		dungeon = new Room("the darkest place in the whole mansion, very slipery");		kitchen = new Room("a small kitchen with alot of alcohol");		locked = new Room("god knows whats inside this room that screams fear alone with its aura");		bedroom = new Room("A Gigantic bed with lots of lube on the side");		// initialise room exits		outside.put(entrance, pool, null, null);		pool.put(kitchen,poolhouse, null, outside);		entrance.put(stairs, kitchen, outside, living);		poolhouse.put(null, null, null, pool);		stairs.put(null, bedroom, entrance, locked);		living.put(null, entrance, null, basement);		basement.put(null, living, dungeon, null);		dungeon.put(basement, null, null, null);		kitchen.put(null, null, pool, entrance);		bedroom.put(null,null, null, stairs);		locked.put(null, stairs, null, null);		currentRoom = outside; // start game outside	}	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while ( !finished ) {			Command command = parser.get(); // reads a command			finished = processCommand(command);		}		System.out.println("Thank you for playing. Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if ( commandWord.equals("help" )) {			printHelp();		} else if (commandWord.equals("go")) {			goRoom(command);						// Gewonnen?			// Hier ein Beispielcode für "gewonnen", der Code prüft Objektreferenzen			/* if (currentRoom == tavern) {				System.out.println("Sie sind in der Taverne und haben gewonnen!");				return true;			} */		} else			if (commandWord.equals("quit")) {			if (command.hasSecondWord()) 				System.out.println("Quit what?");			else 				return true; // signal that we want to quit		}		return false;	}			/* implementations of user commands:	 */ 	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around at Monash Uni, Peninsula Campus.");		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	private void goRoom(Command command) {		// if there is no second word, we don't know where to go...		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {			String direction = command.getSecondWord();				// Try to leave current room.			Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				System.out.println(currentRoom.longDescription());			}		}	}}